package anonymous;

import java.math.BigInteger;
import java.security.MessageDigest;
import java.security.NoSuchAlgorithmException;
import java.util.HashMap;
import java.util.Map;

public class DefaultSecParameters {
    public static final String DIGEST_ALGO = "SHA-256";
    public static final boolean REJECTION_SAMPLING = true;
    public static final int COMP_SEC = 256;
    public static final int STAT_SEC = 40;
    public static final int PRIME_BITLENGTH = 1024;
    public static final int MODULO_BITLENGTH =2*PRIME_BITLENGTH;
    public static final Map<Integer, BigInteger> PRIMES = new HashMap<>();
    static {
        PRIMES.put(1024, new BigInteger("2876309015779705452366888305262439573788763166307690516374881298523722812888015410123335637158520576337921822077942293722540636301030665959885558890231585990044286294797847764420835513619937505911249327233360092301410410917479406103582609768653235794613608170953380771839155935015675460877365701273987586194959"));
        PRIMES.put(2048, new BigInteger("32317006071311007300714876688669951960444102669715484032130345427524655138867890893197201411522913463688717960921898019494119559150490921095088152386448283120630877367300996091750197750389652106796057638384067568276792218642619756161838094338476170470581645852036305042887575891541065808607552399123930385521914333389668342420684974786564569494856176035326322058077805659331026192708460314150258592864177116725943603718461857357598351152301645904403697613233287231227125684710820209725157101726931323469678542580656697935045997268352998638215525166389437335543602135433229604645318478604952148193555853611059596229099"));
        PRIMES.put(2052, new BigInteger("517072097140976116811438027018719231367105642715447744514085526840394482221886254291155222584366615419019487374750368311905912946407854737521410438183172529930094037876815937468003164006234433708736922214145081092428675498281916098589409509415618727529306333632580880686201214264657052937720838385982886168350629334234693478730959596585033111917698816565221152929244890549296419083335365026404137485826833867615097659495389717721573618436826334470459161811732595699634010955373123355602513627630901175514856681290507166960735956293647978211448402662230997368697634166931673674325095657679234371096893657776953539690101"));
        PRIMES.put(3072, new BigInteger("5809605995369958062859502533304574370686975176362895236661486152287203730997110225737336044533118407251326157754980517443990529594540047121662885672187032401032111639706440498844049850989051627200244765807041812394729680540024104827976584369381522292361208779044769892743225751738076979568811309579125511333093243519553784816306381580161860200247492568448150242515304449577187604136428738580990172551573934146255830366405915000869643732053218566832545291107903722831634138599586406690325959725187447169059540805012310209639011750748760017095360734234945757416272994856013308616958529958304677637019181594088528345061285863898271763457294883546638879554311615446446330199254382340016292057090751175533888161918987295591531536698701292267685465517437915790823154844634780260102891718032495396075041899485513811126977307478969074857043710716150121315922024556759241239013152919710956468406379442914941614357107914462567329693649"));
        PRIMES.put(3076, new BigInteger("92953695925919329005752040532873189930991602821806323786583778436595259695953763611797376712529894516021218524079688279103848473512640753946606170754992518416513786235303047981504797615824826035203916252912668998315674888640385677247625349910104356677779340464716318283891612027809231673100980953266008181329491896312860557060902105282589763203959881095170403880244871193235001666182859817295842760825182946340093285862494640013914299712851497069320724657726459565306146217593382507045215355602999154704952652880196963354224188011980160273525771747759132118660367917696212937871336479332874842192306905505416453520980573822372348215316718136746222072868985847143141283188070117440260672913452018808542210590703796729464504587179220676282967448279006652653170477514156484161646267488519926337200670391768220978031636919663505197712699371458401941054752392908147859824210446715375303494502071086639065829713726631401077275098813"));
        PRIMES.put(4096, new BigInteger("1044388881413152506691752710716624382579964249047383780384233483283953907971557456848826811934997558340890106714439262837987573438185793607263236087851365277945956976543709998340361590134383718314428070011855946226376318839397712745672334684344586617496807908705803704071284048740118609114467977783598029006686938976881787785946905630190260940599579453432823469303026696443059025015972399867714215541693835559885291486318237914434496734087811872639496475100189041349008417061675093668333850551032972088269550769983616369411933015213796825837188091833656751221318492846368125550225998300412344784862595674492194617023806505913245610825731835380087608622102834270197698202313169017678006675195485079921636419370285375124784014907159135459982790513399611551794271106831134090584272884279791554849782954323534517065223269061394905987693002122963395687782878948440616007412945674919823050571642377154816321380631045902916136926708342856440730447899971901781465763473223850267253059899795996090799469201774624817718449867455659250178329070473119433165550807568221846571746373296884912819520317457002440926616910874148385078411929804522981857338977648103126085903001302413467189726673216491511131602920781738033436090243804708340403154187787"));
        PRIMES.put(4100, new BigInteger("16710222102610440107068043371465990121279427984758140486147735732543262527544919309581228990959960933454241707431028205407801175010972697716211777405621844447135311624699359973445785442150139493030849120189695139622021101430363403930757354949513385879948926539292859265140544779841897745831487644537568464106991023630108604575150490083044175049593271254925175508848427143088944400255558397883427448667101368958164663781091806630951947745404989962231943601603024661584134672986801498693341608816527553412312812319737861910590928243420749213395009469338508019541095885541890008803615972806597516557801530791875113872380904094611929773211709366081401737953645348323163171237010704282848106803127761278746182709924566001996544238514546167359724648214393784828708337709298145449348366148476664877596527269176552273043572304982318495803088033967414331004526063175049856118607130798717168809146278034477061142090096734446658190827333485703051687166399550428503452215571581604276048958396735937452791507228393997083495197879290548002853265127569910930648812921091549545147941972750158605112325079312039054825870573986374161254590876872367709717423642369650017374448020838615475035626771463864178105646732507808534977443900875333446450467041629"));
    }
    public static final BigInteger MODULO = findMaxPrime(PRIME_BITLENGTH);

    public static BigInteger findMaxPrime(int bitLength) {
        if (PRIMES.containsKey(bitLength)) {
            return PRIMES.get(bitLength);
        }
        BigInteger candidate = BigInteger.TWO.pow(bitLength).subtract(BigInteger.ONE);
        while (!candidate.isProbablePrime(STAT_SEC)) {
            candidate = candidate.subtract(BigInteger.TWO);
        }
        return candidate;
    }

    public static MessageDigest getDigest() {
        MessageDigest digest;
        try {
            digest = MessageDigest.getInstance(DIGEST_ALGO);
        } catch (NoSuchAlgorithmException e) {
            throw new RuntimeException(DIGEST_ALGO + " not supported", e);
        }
        return digest;
    }
}
